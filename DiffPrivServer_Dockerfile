FROM ubuntu:latest

# This makes add-apt-repository available.
RUN apt-get -y update && \
    apt-get -y install \
        apt-utils \
	curl \
	python \
        python-pkg-resources \
        software-properties-common \
        unzip

RUN export DEBIAN_FRONTEND=noninteractive

RUN ln -fs /usr/share/zoneinfo/Europe/Italy /etc/localtime && apt-get install -y tzdata && dpkg-reconfigure --frontend noninteractive tzdata

# Install Git >2.0.1
RUN add-apt-repository ppa:git-core/ppa && \
    apt-get -y update && \
    apt-get -y install git

# Install bazel (https://docs.bazel.build/versions/master/install-ubuntu.html)
RUN apt-get -y install openjdk-8-jdk && \
    echo "deb [arch=amd64] http://storage.googleapis.com/bazel-apt stable jdk1.8" | tee /etc/apt/sources.list.d/bazel.list && \
    curl https://bazel.build/bazel-release.pub.gpg | apt-key add - && \
    apt-get update && \

    apt-get -y install bazel && \
    apt-get -y upgrade bazel

#RUN bazel version

# Add the PostgreSQL PGP key to verify their Debian packages.
# It should be the same key as https://www.postgresql.org/media/keys/ACCC4CF8.asc
#RUN apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8

# Add PostgreSQL's repository. It contains the most recent stable release
#     of PostgreSQL, ``10.0``.
#RUN echo "deb http://apt.postgresql.org/pub/repos/apt/ precise-pgdg main" > /etc/apt/sources.list.d/pgdg.list

# Install ``python-software-properties``, ``software-properties-common`` and PostgreSQL 10.0
#  There are some warnings (in red) that show up during the build. You can hide
#  them by prefixing each apt-get statement with DEBIAN_FRONTEND=noninteractive
#RUN apt-get update && apt-get install -y postgresql-10 postgresql-client-10 postgresql-contrib-10

# Note: The official Debian and Ubuntu images automatically ``apt-get clean``
# after each ``apt-get``

# Run the rest of the commands as the ``postgres`` user created by the ``postgres-10.0`` package when it was ``apt-get installed``
#USER postgres

# Create a PostgreSQL role named ``docker`` with ``docker`` as the password and
# then create a database `docker` owned by the ``docker`` role.
# Note: here we use ``&&\`` to run commands one after the other - the ``\``
#       allows the RUN command to span multiple lines.
#RUN /etc/init.d/postgresql start &&\
#    psql --command "CREATE USER docker WITH SUPERUSER PASSWORD 'docker';" &&\
#    createdb -O docker docker

# Adjust PostgreSQL configuration so that remote connections to the
# database are possible.
#RUN echo "host all  all    0.0.0.0/0  md5" >> /etc/postgresql/10/main/pg_hba.conf

# And add ``listen_addresses`` to ``/etc/postgresql/10.0/main/postgresql.conf``
#RUN echo "listen_addresses='*'" >> /etc/postgresql/10/main/postgresql.conf

# Expose the PostgreSQL port
#EXPOSE 5432

# Add VOLUMEs to allow backup of config, logs and databases
#VOLUME  ["/etc/postgresql", "/var/log/postgresql", "/var/lib/postgresql"]

# Set the default command to run when starting the container
#CMD ["/usr/lib/postgresql/12.0/bin/postgres", "-D", "/var/lib/postgresql/12.0/main", "-c", "config_file=/etc/postgresql/12.0/main/postgresql.conf"]

#RUN export PG_DIR=/etc/postgresql/10

COPY ./differential-privacy-master/ /differential-privacy-master/

WORKDIR /differential-privacy-master

RUN bazel build differential_privacy/...

#RUN differential_privacy/postgres/install_extension.sh

#RUN service postgresql start

#RUN CREATE EXTENSION anon_func;

RUN bazel run --sandbox_debug differential_privacy/example:report_the_carrots --CarrotsDataFile="differential_privacy/example/animals_and_carrots.csv"

# Make port 80 available to the world outside this container
#EXPOSE 80

# Run app.py when the container launches
CMD ["bash"]
#CMD ["bash"]
